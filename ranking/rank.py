import pandas as pd
import base64
from openai import OpenAI
import requests
import time
import os
from tqdm import tqdm

def compute_accuracy(results):
    '''
    "compute the percentage of correct responses"
    input: a list of results with label being the first element and API response being the second element
    output: percentage of correct responses
    '''
    num_correct = 0
    for result in results:
        if result[0] == result[1]:
            num_correct += 1
    return round(float(num_correct) / len(results) * 100, 2)

def compute_threshold(results):
    '''
    "compute the threshold for recalibration"
    input: a list of results, each containing three elements: [label, response, logprob_a - logprob_b]
    output: threshold for recalibration
    '''
    results.sort(reverse=True, key=lambda x: x[-1])
    r = [[], [], []]
    r[0] = [r[0] for r in results]
    r[2] = [r[2] for r in results]
    max_correct = 0
    for i in range(1, len(results)):
        recalibrated_gt = ['A' for _ in range(i)] + ['B' for _ in range(len(results) - i)]
        num_correct = 0
        for l, t, gt in zip(r[0], r[2], recalibrated_gt):
            if l == gt:
                num_correct += 1
        if num_correct > max_correct:
            max_correct = num_correct
            max_threshold = r[2][i-1]
    return max_threshold

def recalibrate(results, max_threshold = 3.003349167):
    '''
    "recalibrate the description model's predictions that show a strong bias"
    input: a list of results, each containing three elements: [label, response, top_logprobs], where top_logprobs contains log probabilities of choosing A and B
    output: recalibrated accuracy
    '''
    for result in results:
        if result[2][0].token == "A":
            logprob_a = result[2][0].logprob
            logprob_b = result[2][1].logprob
        else:
            logprob_a = result[2][1].logprob
            logprob_b = result[2][0].logprob
        if (logprob_a > logprob_b and result[1] == "B") or (logprob_a < logprob_b and result[1] == "A"):
            print("Check!", result)
        result[-1] = logprob_a - logprob_b
        if result[1] != "A" and result[1] != "B":
            print(result)
            
    if max_threshold != 3.003349167:
        max_threshold = compute_threshold(results)
            
    for result in results:
        if result[2] > max_threshold:
            result[1] = "A"
        else:
            result[1] = "B"
    return compute_accuracy(results)

def recalibrate_v(results, max_threshold = 3.003349167):
    '''
    "recalibrate the vision model's predictions that show a strong bias"
    input: a list of results, each containing three elements: [label, response, top_logprobs], where top_logprobs contains log probabilities of choosing A and B
    output: recalibrated accuracy
    '''
    for result in results:
        # print(result)
        if result[2][0]['token'] == "A":
            logprob_a = result[2][0]['logprob']
            logprob_b = result[2][1]['logprob']
        else:
            logprob_a = result[2][1]['logprob']
            logprob_b = result[2][0]['logprob']
        if (logprob_a > logprob_b and result[1] == "B") or (logprob_a < logprob_b and result[1] == "A"):
            print("Check!", result)
        result[-1] = logprob_a - logprob_b
        if result[1] != "A" and result[1] != "B":
            print(result)
            
    if max_threshold != 3.003349167:
        max_threshold = compute_threshold(results)
            
    for result in results:
        if result[2] > max_threshold:
            result[1] = "A"
        else:
            result[1] = "B"
    return compute_accuracy(results)
                  
# datasets downloaded from hugging face
df_parquet1 = pd.read_parquet("/Users/chenjiayi/Desktop/humor/parquet/train-00000-of-00002.parquet")
df_parquet2 = pd.read_parquet("/Users/chenjiayi/Desktop/humor/parquet/validation-00000-of-00001.parquet")
df_parquet3 = pd.read_parquet("/Users/chenjiayi/Desktop/humor/parquet/test-00000-of-00001.parquet")
df_parquet = pd.concat([df_parquet1, df_parquet2, df_parquet3], ignore_index=True)             
                
def prepare_DescriptionModel(comparison_method, Hessel = False, GPT4oV = False, GPT4V = False, 
                             df_parquet = df_parquet, df_sample = df_parquet1, folder_path = '/Users/chenjiayi/Desktop/humor/caption-contest-data/summaries',
                             Deg = None, Dtesting = None, cartoons_GroupComparison = None, num_eg = 600, random_seed = 42):
    '''
    "prepare necessary variables for description models"
    comparison_method: 
        "Pairwise": evaluate two candidate captions at a time
        "Overall", "BestPick": compare groups of ten captions from different sources, such as human submissions from different ranking levels, or captions generated by different language models
    Hessel, GPT4oV, GPT4V: description generator
    folder_path: path of caption contest data
    Deg: a dataframe of descriptions for all examples generated by specific models.
    Dtesting: a dataframe of descriptions for 100 question cartoons generated by specific models, having the same contests as cartoons_GroupComparison.
    cartoons_GroupComparison: a list of contest numbers
    '''
    testing = df_sample.sample(n = num_eg, random_state = random_seed, ignore_index=True)
    eg_random = list(testing["contest_number"])

    if comparison_method == "Pairwise":
        if Hessel: # if descriptions from Hessel et al. are available
            return testing
        elif GPT4oV or GPT4V: # if descriptions generated by GPT4oV or GPT4V are available
            deg = [] # description for 600 eg cartoons
            for contest_num in eg_random:
                canny = Deg[Deg["cnum"] == contest_num]["canny"].astype(str).values[0]
                uncanny = Deg[Deg["cnum"] == contest_num]["uncanny"].astype(str).values[0]
                deg.append([canny, uncanny])
            eg = [] # 600 captions and label
            for cnum in eg_random:
                c = list(df_parquet[df_parquet["contest_number"] == cnum]["caption_choices"])[0]
                c1 = c[0]
                c2 = c[1]
                label = list(df_parquet[df_parquet["contest_number"] == cnum]["label"])[0]
                eg.append([c1, c2, label])
            return deg, eg
        
    elif comparison_method == "Overall" or comparison_method == "BestPick":
        if Hessel:
            # extract human contestant entries at top10 and #1000-#1009
            captions = []
            cartoons_num = []
            for filename in os.listdir(folder_path):
                num = int(filename.split('.')[0][:3])
                if num in cartoons_GroupComparison and num not in cartoons_num:
                    cartoons_num.append(num)
                    file_path = os.path.join(folder_path, filename)
                    df = pd.read_csv(file_path)
                    captions_top = ""
                    for i in range(10):
                        if i == 0:
                            captions_top += f"{i+1}.\n"
                            captions_top += df["caption"][i]
                        else:
                            captions_top += f"\n{i+1}.\n"
                            captions_top += df["caption"][i]
                    captions_1k = ""
                    for i in range(1000,1010):
                        if i == 1000:
                            captions_1k += f"{i-999}.\n"
                            captions_1k += df["caption"][i]
                        else:
                            captions_1k += f"\n{i-999}.\n"
                            captions_1k += df["caption"][i]
                    captions.append([captions_top, captions_1k])
            # get corresponding descriptions from Hessel et al.
            descriptions = []
            for i in cartoons_num:
                d = list(df_parquet[df_parquet['contest_number'] == int(i)]['image_description'])[0]
                dud = list(df_parquet[df_parquet['contest_number'] == int(i)]['image_uncanny_description'])[0]
                descriptions.append([d,dud])
            return testing, descriptions, captions
        
        elif GPT4oV or GPT4V:
            # extract human contestant entries at top10 and #1000-#1009
            captions = []
            for cnum in list(Dtesting["cnum"]):
                for filename in os.listdir(folder_path):
                    num = int(filename.split('.')[0][:3])
                    if num == cnum:
                        file_path = os.path.join(folder_path, filename)
                        df = pd.read_csv(file_path)
                        captions_top = ""
                        for i in range(10):
                            if i == 0:
                                captions_top += f"{i+1}.\n"
                                captions_top += df["caption"][i]
                            else:
                                captions_top += f"\n{i+1}.\n"
                                captions_top += df["caption"][i]
                        captions_1k = ""
                        for i in range(1000,1010):
                            if i == 1000:
                                captions_1k += f"{i-999}.\n"
                                captions_1k += df["caption"][i]
                            else:
                                captions_1k += f"\n{i-999}.\n"
                                captions_1k += df["caption"][i]
                        captions.append([captions_top, captions_1k])
                    
            dtesting = []  # description for 100 testing cartoons
            for index, row in Dtesting.iterrows():
                dtesting.append([row["canny"],row["uncanny"]])

            deg = [] # description for 600 eg cartoons
            for contest_num in eg_random:
                canny = Deg[Deg["cnum"] == contest_num]["canny"].astype(str).values[0]
                uncanny = Deg[Deg["cnum"] == contest_num]["uncanny"].astype(str).values[0]
                deg.append([canny, uncanny])

            eg = [] # 600 captions and label
            for cnum in eg_random:
                c = list(df_parquet[df_parquet["contest_number"] == cnum]["caption_choices"])[0]
                c1 = c[0]
                c2 = c[1]
                label = list(df_parquet[df_parquet["contest_number"] == cnum]["label"])[0]
                eg.append([c1, c2, label])
            return deg, eg, dtesting, captions
        
def prepare_VisionModel(comparison_method, cartoons_GroupComparison = None, num_eg = 600, random_seed = 42,
                        df_sample = df_parquet1, folder_path = '/Users/chenjiayi/Desktop/humor/caption-contest-data/summaries'):
    '''
    prepare necessary variables for vision models
    comparison_method: "Pairwise", "Overall", "BestPick"
    cartoons_GroupComparison: a list of contest numbers to be evaluated
    '''
    df = df_sample.sample(n = num_eg, random_state = random_seed)
    df = df.reset_index(drop=False)
            
    image_pairs = []
    for i in range(num_eg):
        pair = []
        contest_num = df['contest_number'][i]
        image_bytes = df['image.bytes'][i]
        base64_image = base64.b64encode(image_bytes).decode()
        captions = df['caption_choices'][i]
        captionA = str(captions[0])
        captionB = str(captions[1])
        label = str(df['label'][i])
        pair.append(contest_num) #0
        pair.append(base64_image) #1
        pair.append(captionA) #2
        pair.append(captionB) #3
        pair.append(label) #4
        image_pairs.append(pair)
        pair = []
        
    if comparison_method == "Pairwise":
        return image_pairs
    elif comparison_method == "Overall" or comparison_method == "BestPick":
        # extract human contestant entries at top10 and #1000-#1009
        captions = []
        cartoons_num = []
        for filename in os.listdir(folder_path):
            num = int(filename.split('.')[0][:3])
            if num in cartoons_GroupComparison and num not in cartoons_num:
                cartoons_num.append(num)
                file_path = os.path.join(folder_path, filename)
                DF = pd.read_csv(file_path)
                captions_top = ""
                for i in range(10):
                    if i == 0:
                        captions_top += f"{i+1}.\n"
                        captions_top += DF["caption"][i]
                    else:
                        captions_top += f"\n{i+1}.\n"
                        captions_top += DF["caption"][i]
                captions_1k = ""
                for i in range(1000,1010):
                    if i == 1000:
                        captions_1k += f"{i-999}.\n"
                        captions_1k += DF["caption"][i]
                    else:
                        captions_1k += f"\n{i-999}.\n"
                        captions_1k += DF["caption"][i]
                captions.append([captions_top, captions_1k])
        img = [] # get corresponding descriptions from Hessel et al.
        for i in cartoons_num:
            image_bytes = list(df_sample[df_sample['contest_number'] == int(i)]['image.bytes'])[0]
            base64_image = base64.b64encode(image_bytes).decode()
            img.append(base64_image)
            
        return image_pairs, img, captions
                

class Ranking:
    def __init__(self, comparison_method, evaluator, annotation_type, description_generator = None, 
                 testing = None, deg = None, eg = None, descriptions = None, dtesting = None,
                 image_pairs = None, img = None, 
                 captions = None, num_pairs = 100, apiKey = None):
        '''
        comparison_method: "Pairwise", "Overall", "BestPick"
        Pairwise: the evaluator compares two candidate captions at a time
        Overall: the evaluator compares the overall funniness of the group of ten model-generated captions against each group of ten contestant-submitted captions. 
        BestPick: the evaluator first pick the funniest caption from each of the two groups and then choose the funnier caption accordingly.
        evaluator: gpt-4o, gpt-4-turbo
        annotation_type: "Description", "Image"
        description_generator: "gpt-4o-vision", "gpt-4-vision", "Hessel" 
        testing: a dataframe of Hessel's dataset
        deg: a list of (canny, uncanny) description generated by a specific model
        eg: a list of (captionA, captionB, label) from Hessel's dataset
        descriptions: a list of Hessel's descriptions corresponding to the cartoons being asked about.
        captions: a list of caption groups corresponding to the cartoons being asked about, used in either vision model or description model.
        dtesting: a list of generators' descriptions corresponding to the cartoons being asked about.
        image_pairs: a list of relevant info about images
        img: a list of images bytes corresponding to the cartoons being asked about.
        '''
        self.comparison_method = comparison_method
        self.evaluator = evaluator
        self.type = annotation_type
        self.generator = description_generator
        self.num_pairs = num_pairs
        self.results = []
        self.client = OpenAI(api_key = apiKey)
        self.max_retries = 5  
        self.retry_delay = 2
        self.headers = {
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {apiKey}"
                    }
        self.testing = testing
        self.deg = deg
        self.eg = eg
        self.descriptions = descriptions
        self.captions = captions
        self.dtesting = dtesting
        self.image_pairs = image_pairs
        self.img = img
        
    def rank(self):
        '''
        compute ranking accuracy of captions ranked #1-10 vs captions ranked #1000-1009
        '''
        for i in tqdm(range(self.num_pairs)):
            # print(i)
            if self.type == "Description": # use text models
                if self.generator == "Hessel": # use descriptions from Hessel et al.
                    # Getting the description
                    d1 = self.testing["image_description"][i * 6]
                    dud1 = self.testing["image_uncanny_description"][i * 6]

                    d2 = self.testing["image_description"][i * 6 + 1]
                    dud2 = self.testing["image_uncanny_description"][i * 6 + 1]

                    d3 = self.testing["image_description"][i * 6 + 2]
                    dud3 = self.testing["image_uncanny_description"][i * 6 + 2]

                    d4 = self.testing["image_description"][i * 6 + 3]
                    dud4 = self.testing["image_uncanny_description"][i * 6 +3]

                    d5 = self.testing["image_description"][i * 6 + 4]
                    dud5 = self.testing["image_uncanny_description"][i * 6 + 4]

                    if self.comparison_method == "Pairwise":
                        d6 = self.testing["image_description"][i * 6 + 5]
                        dud6 = self.testing["image_uncanny_description"][i * 6 + 5]
                    else: # get descriptions corresponding to contest numbers in group comparison 
                        d6 = self.descriptions[i][0]
                        dud6 = self.descriptions[i][1]
                        
                    #captions and label
                    c1a = self.testing["caption_choices"][i * 6][0]
                    c1b = self.testing["caption_choices"][i * 6][1]
                    l1 = self.testing["label"][i * 6]

                    c2a = self.testing["caption_choices"][i * 6 + 1][0]
                    c2b = self.testing["caption_choices"][i * 6 + 1][1]
                    l2 = self.testing["label"][i * 6 + 1]

                    c3a = self.testing["caption_choices"][i * 6 + 2][0]
                    c3b = self.testing["caption_choices"][i * 6 + 2][1]
                    l3 = self.testing["label"][i * 6 + 2]

                    c4a = self.testing["caption_choices"][i * 6 + 3][0]
                    c4b = self.testing["caption_choices"][i * 6 + 3][1]
                    l4 = self.testing["label"][i * 6 + 3]

                    c5a = self.testing["caption_choices"][i * 6 + 4][0]
                    c5b = self.testing["caption_choices"][i * 6 + 4][1]
                    l5 = self.testing["label"][i * 6 + 4]
                    
                    if self.comparison_method == "Pairwise":
                        c6a = self.testing["caption_choices"][i * 6 + 5][0]
                        c6b = self.testing["caption_choices"][i * 6 + 5][1]
                        label = self.testing["label"][i * 6 + 5]
                    else:  # get captions corresponding to contest numbers in group comparison 
                        c6a = self.captions[i][0]
                        c6b = self.captions[i][1]
                        
                else:
                    # descriptions generated by models
                    d1 = self.deg[i * 6][0] # canny description
                    dud1 = self.deg[i * 6][1] # uncanny description

                    d2 = self.deg[i * 6 + 1][0]
                    dud2 = self.deg[i * 6 + 1][1]

                    d3 = self.deg[i * 6 + 2][0]
                    dud3 = self.deg[i * 6 + 2][1]

                    d4 = self.deg[i * 6 + 3][0]
                    dud4 = self.deg[i * 6 +3][1]

                    d5 = self.deg[i * 6 + 4][0]
                    dud5 = self.deg[i * 6 + 4][1]

                    if self.comparison_method == "Pairwise":
                        d6 = self.deg[i * 6 + 5][0]
                        dud6 = self.deg[i * 6 + 5][1]
                    else: # get descriptions corresponding to contest numbers in group comparison 
                        d6 = self.dtesting[i][0]
                        dud6 = self.dtesting[i][1]
                        
                    #captions and label
                    c1a = self.eg[i * 6][0]
                    c1b = self.eg[i * 6][1]
                    l1 = self.eg[i * 6][2]

                    c2a = self.eg[i * 6 + 1][0]
                    c2b = self.eg[i * 6 + 1][1]
                    l2 = self.eg[i * 6 + 1][2]

                    c3a = self.eg[i * 6 + 2][0]
                    c3b = self.eg[i * 6 + 2][1]
                    l3 = self.eg[i * 6 + 2][2]

                    c4a = self.eg[i * 6 + 3][0]
                    c4b = self.eg[i * 6 + 3][1]
                    l4 = self.eg[i * 6 + 3][2]

                    c5a = self.eg[i * 6 + 4][0]
                    c5b = self.eg[i * 6 + 4][1]
                    l5 = self.eg[i * 6 + 4][2]

                    if self.comparison_method == "Pairwise":
                        c6a = self.eg[i * 6 + 5][0]
                        c6b = self.eg[i * 6 + 5][1]
                        label = self.eg[i * 6 + 5][2]
                    else: # get captions corresponding to contest numbers in group comparison 
                        c6a = self.captions[i][0]
                        c6b = self.captions[i][1]
                    
                if self.comparison_method == "Pairwise":
                    response = self.client.chat.completions.create(
                    model = self.evaluator,
                    messages = [
                        {"role": "system", "content": "You are a judge for the new yorker cartoon caption contest."},
                        {"role": "user", "content": "In this task, you will see two description for a cartoon. Then, you will see two captions that were written about the cartoon. Then you will choose which captions is funnier. I am going to give you five examples first and you answer the last example with either A or B"},
                        {"role": "user", "content": "For example, the descriptions for the images are " + d1 + " and " + dud1 + " The two captions are A: " + c1a + " B: " + c1b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l1},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d2 + " and " + dud2 + " The two captions are A: " + c2a + " B: " + c2b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l2},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d3 + " and " + dud3 + " The two captions are A: " + c3a + " B: " + c3b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l3},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d4 + " and " + dud4 + " The two captions are A: " + c4a + " B: " + c4b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l4},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d5 + " and " + dud5 + " The two captions are A: " + c5a + " B: " + c5b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l5},
                        {"role": "user", "content": "The descriptions for the images are " + d6 + " and " + dud6 + " The two captions are A: " + c6a + " B: " + c6b },
                        {"role": "user", "content": "Choose the caption that is funnier. Answer with either A or B and nothing else."}
                    ],
                    logprobs = True,
                    top_logprobs = 2,
                    temperature=0
                    )
                    self.results.append([label, response.choices[0].message.content, response.choices[0].logprobs.content[0].top_logprobs])
                    
                    
                    
                elif self.comparison_method == "Overall":
                    response = self.client.chat.completions.create(
                    model = self.evaluator,
                    messages = [
                        {"role": "system", "content": "You are a judge for the new yorker cartoon caption contest."}, ### adjust the system promtp??
                        {"role": "user", "content": "In this task, you will see two description for a cartoon. Then, you will see two captions that were written about the cartoon. Then you will choose which captions is funnier. I am going to give you five examples first and you answer the last example with either A or B"},
                        {"role": "user", "content": "For example, the descriptions for the images are " + d1 + " and " + dud1 + " The two captions are A: " + c1a + " B: " + c1b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l1},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d2 + " and " + dud2 + " The two captions are A: " + c2a + " B: " + c2b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l2},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d3 + " and " + dud3 + " The two captions are A: " + c3a + " B: " + c3b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l3},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d4 + " and " + dud4 + " The two captions are A: " + c4a + " B: " + c4b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l4},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d5 + " and " + dud5 + " The two captions are A: " + c5a + " B: " + c5b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l5},
                        {"role": "user", "content": "The descriptions for the images are " + d6 + " and " + dud6 + " The two groups of captions are group A: " + c6a + "\ngroup B: " + c6b },
                        {"role": "user", "content": "Choose the group of captions that is funnier. Answer with only one letter A or B, and nothing else."}
                    ],
                    logprobs = True,
                    top_logprobs = 2,
                    temperature = 0
                    )
                    label = "A"
                    flip_label = "B" 
                    self.results.append([label, response.choices[0].message.content, response.choices[0].logprobs.content[0].top_logprobs])
                    
                    # flip the two groups to recalibrate the predictions later
                    response = self.client.chat.completions.create(
                    model = self.evaluator,
                    messages = [
                        {"role": "system", "content": "You are a judge for the new yorker cartoon caption contest."},
                        {"role": "user", "content": "In this task, you will see two description for a cartoon. Then, you will see two captions that were written about the cartoon. Then you will choose which captions is funnier. I am going to give you five examples first and you answer the last example with either A or B"},
                        {"role": "user", "content": "For example, the descriptions for the images are " + d1 + " and " + dud1 + " The two captions are A: " + c1a + " B: " + c1b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l1},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d2 + " and " + dud2 + " The two captions are A: " + c2a + " B: " + c2b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l2},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d3 + " and " + dud3 + " The two captions are A: " + c3a + " B: " + c3b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l3},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d4 + " and " + dud4 + " The two captions are A: " + c4a + " B: " + c4b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l4},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d5 + " and " + dud5 + " The two captions are A: " + c5a + " B: " + c5b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l5},
                        {"role": "user", "content": "The descriptions for the images are " + d6 + " and " + dud6 + " The two groups of captions are group A: " + c6b + "\ngroup B: " + c6a },
                        {"role": "user", "content": "Choose the group of captions that is funnier. Answer with only one letter A or B, and nothing else."}
                    ],
                    logprobs = True,
                    top_logprobs = 2,
                    temperature = 0
                    )
                    self.results.append([flip_label, response.choices[0].message.content, response.choices[0].logprobs.content[0].top_logprobs])
                    
                    
                    
                elif self.comparison_method == "BestPick":
                    response = self.client.chat.completions.create(
                    model = self.evaluator,
                    messages = [
                        {"role": "system", "content": "You are a judge for the new yorker cartoon caption contest."}, ### 
                        {"role": "user", "content": "In this task, you will see two description for a cartoon. Then, you will see two captions that were written about the cartoon. Then you will choose which captions is funnier. I am going to give you five examples first and you answer the last example with either A or B"},
                        {"role": "user", "content": "For example, the descriptions for the images are " + d1 + " and " + dud1 + " The two captions are A: " + c1a + " B: " + c1b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l1},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d2 + " and " + dud2 + " The two captions are A: " + c2a + " B: " + c2b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l2},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d3 + " and " + dud3 + " The two captions are A: " + c3a + " B: " + c3b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l3},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d4 + " and " + dud4 + " The two captions are A: " + c4a + " B: " + c4b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l4},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d5 + " and " + dud5 + " The two captions are A: " + c5a + " B: " + c5b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l5},
                        {"role": "user", "content": "The descriptions for the images are " + d6 + " and " + dud6 + " The two groups of captions are group A: " + c6a + "\ngroup B: " + c6b },
                        {"role": "user", "content": "Find the funniest caption for each group. Then choose the funnier group based on these funniest captions. Think step by step but finish the last line of your answer with only one letter A or B, and nothing else."}
                    ],
                    logprobs = True,
                    top_logprobs = 2,
                    temperature = 0
                    )
                    label = "A"
                    flip_label = "B"
                    if response.choices[0].message.content[-1] != "A" and response.choices[0].message.content[-1] != "B":
                        self.results.append([label, response.choices[0].message.content])
                    else:
                        self.results.append([label, response.choices[0].message.content[-1]])
                        
                    
                    response = self.client.chat.completions.create(
                    model = self.evaluator,
                    messages = [
                        {"role": "system", "content": "You are a judge for the new yorker cartoon caption contest."},
                        {"role": "user", "content": "In this task, you will see two description for a cartoon. Then, you will see two captions that were written about the cartoon. Then you will choose which captions is funnier. I am going to give you five examples first and you answer the last example with either A or B"},
                        {"role": "user", "content": "For example, the descriptions for the images are " + d1 + " and " + dud1 + " The two captions are A: " + c1a + " B: " + c1b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l1},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d2 + " and " + dud2 + " The two captions are A: " + c2a + " B: " + c2b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l2},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d3 + " and " + dud3 + " The two captions are A: " + c3a + " B: " + c3b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l3},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d4 + " and " + dud4 + " The two captions are A: " + c4a + " B: " + c4b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l4},
                        {"role": "user", "content": "Another example, the descriptions for the images are " + d5 + " and " + dud5 + " The two captions are A: " + c5a + " B: " + c5b},
                        {"role": "assistant", "content": "The caption that is funnier is " + l5},
                        {"role": "user", "content": "The descriptions for the images are " + d6 + " and " + dud6 + " The two groups of captions are group A: " + c6b + "\ngroup B: " + c6a },
                        {"role": "user", "content": "Find the funniest caption for each group. Then choose the funnier group based on these funniest captions. Think step by step but finish the last line of your answer with only one letter A or B, and nothing else."}
                    ],
                    logprobs = True,
                    top_logprobs = 2,
                    temperature = 0
                    )
                    if response.choices[0].message.content[-1] != "A" and response.choices[0].message.content[-1] != "B":
                        self.results.append([flip_label, response.choices[0].message.content])
                    else:
                        self.results.append([flip_label, response.choices[0].message.content[-1]])
                    
                    

            elif self.type == "Image":
                base64_image1 = self.image_pairs[i*6][1]
                captionA1 = self.image_pairs[i*6][2]
                captionB1 = self.image_pairs[i*6][3]
                label1 = self.image_pairs[i*6][4]

                base64_image2 = self.image_pairs[i*6+1][1]
                captionA2 = self.image_pairs[i*6+1][2]
                captionB2 = self.image_pairs[i*6+1][3]
                label2 = self.image_pairs[i*6+1][4]

                base64_image3 = self.image_pairs[i*6+2][1]
                captionA3 = self.image_pairs[i*6+2][2]
                captionB3 = self.image_pairs[i*6+2][3]
                label3 = self.image_pairs[i*6+2][4]

                base64_image4 = self.image_pairs[i*6+3][1]
                captionA4 = self.image_pairs[i*6+3][2]
                captionB4 = self.image_pairs[i*6+3][3]
                label4 = self.image_pairs[i*6+3][4]

                base64_image5 = self.image_pairs[i*6+4][1]
                captionA5 = self.image_pairs[i*6+4][2]
                captionB5 = self.image_pairs[i*6+4][3]
                label5 = self.image_pairs[i*6+4][4]

                if self.comparison_method == "Pairwise":
                    contest_num = self.image_pairs[i*6+5][0]
                    base64_image = self.image_pairs[i*6+5][1]
                    captionA = self.image_pairs[i*6+5][2]
                    captionB = self.image_pairs[i*6+5][3]
                    label = self.image_pairs[i*6+5][4]
                else: # get images and captions corresponding to contest numbers in group comparison
                    base64_image = self.img[i]
                    captionA = self.captions[i][0]
                    captionB = self.captions[i][1]
                    label = "A"
                
                if self.comparison_method == "Pairwise":
                    retry_count = 0 
                    success = False
                    while not success and retry_count < self.max_retries:
                        try:
                            payload = {
                            "model": self.evaluator,
                            "messages": [
                                {"role": "system", 
                                "content": "You are a judge for the new yorker cartoon caption contest. Your job is to find the funniest caption."
                                },
                                # 1st example
                                {"role": "user",
                                "content": [
                                    {"type": "text", 
                                    "text": "In this task, you will see a cartoon first and two captions that were written about it then. The task is to choose which caption is funnier. I am going to show you five cartoons, corresponding captions and their answers first. In the end, for the last cartoon, answer with only one letter A or B, and nothing else."
                                    },        
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image1}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"For this example, the two captions are A: {captionA1}, B: {captionB1}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label1}"},
                                # 2nd example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image2}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA2}, B: {captionB2}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label2}"},
                                # 3rd example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image3}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA3}, B: {captionB3}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label3}"},
                                # 4 example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image4}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA4}, B: {captionB4}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label4}"},
                                # 5 example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image5}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA5}, B: {captionB5}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label5}"},


                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Answer with only one letter A or B, and nothing else. Choose the caption that is funnier A: {captionA} or B: {captionB}"
                                    }],
                                }
                            ],
                            
                            "logprobs": True,
                            "top_logprobs": 2,
                            "temperature": 0
                            }

                            response = requests.post("https://api.openai.com/v1/chat/completions", headers=self.headers, json=payload)
                            if 'choices' in response.json():
                                self.results.append([label, response.json()['choices'][0]['message']['content'], response.json()['choices'][0]['logprobs']['content'][0]['top_logprobs']])
                                success = True
                            else: 
                                print("No 'choices' in response, retrying...")
                                raise KeyError("The 'choices' key is missing or empty.")

                        except KeyError as key_err:
                            print(f'Key error: {key_err}')
                        except Exception as err:
                            print(f'Other error occurred: {err}')
                            
                        if not success:
                            retry_count += 1
                            print(f"Attempt {retry_count} failed for iteration {i}, retrying in {self.retry_delay} seconds...")
                            time.sleep(self.retry_delay)
                            
                    if not success:
                        print(f"Max retries reached for iteration {i}. Moving to next iteration.")
                        
                    
            
                elif self.comparison_method == "Overall":
                    retry_count = 0 
                    success = False
                    while not success and retry_count < self.max_retries:
                        try:
                            payload = {
                            "model": self.evaluator,
                            "messages": [
                                {"role": "system", 
                                "content": "You are a judge for the new yorker cartoon caption contest. Your job is to find the funniest caption."
                                },
                                # 1st example
                                {"role": "user",
                                "content": [
                                    {"type": "text", 
                                    "text": "In this task, you will see a cartoon first and two captions that were written about it then. The task is to choose which caption is funnier. I am going to show you five cartoons, corresponding captions and their answers first. In the end, for the last cartoon, answer with only one letter A or B, and nothing else."
                                    },        
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image1}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"For this example, the two captions are A: {captionA1}, B: {captionB1}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label1}"},
                                # 2nd example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image2}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA2}, B: {captionB2}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label2}"},
                                # 3rd example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image3}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA3}, B: {captionB3}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label3}"},
                                # 4 example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image4}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA4}, B: {captionB4}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label4}"},
                                # 5 example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image5}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA5}, B: {captionB5}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label5}"},


                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Answer with only one letter A or B, and nothing else. Choose the group of caption that is funnier. Group A: {captionA} or Group B: {captionB}"
                                    }],
                                }
                            ],
                            
                            "logprobs": True,
                            "top_logprobs": 2,
                            "temperature": 0
                            }

                            response = requests.post("https://api.openai.com/v1/chat/completions", headers=self.headers, json=payload)
                            if 'choices' in response.json():
                                self.results.append([label, response.json()['choices'][0]['message']['content'], response.json()['choices'][0]['logprobs']['content'][0]['top_logprobs']])
                                success = True
                            else: 
                                print("No 'choices' in response, retrying...")
                                raise KeyError("The 'choices' key is missing or empty.")

                        except KeyError as key_err:
                            print(f'Key error: {key_err}')
                        except Exception as err:
                            print(f'Other error occurred: {err}')
                            
                        if not success:
                            retry_count += 1
                            print(f"Attempt {retry_count} failed for iteration {i}, retrying in {self.retry_delay} seconds...")
                            time.sleep(self.retry_delay)
                            
                    if not success:
                        print(f"Max retries reached for iteration {i}. Moving to next iteration.")
                        
                    flip_label = "B" # flip the two groups to recalibrate the predictions later
                        
                    retry_count = 0 
                    success = False
                    while not success and retry_count < self.max_retries:
                        try:
                            payload = {
                            "model": self.evaluator,
                            "messages": [
                                {"role": "system", 
                                "content": "You are a judge for the new yorker cartoon caption contest. Your job is to find the funniest caption."
                                },
                                # 1st example
                                {"role": "user",
                                "content": [
                                    {"type": "text", 
                                    "text": "In this task, you will see a cartoon first and two captions that were written about it then. The task is to choose which caption is funnier. I am going to show you five cartoons, corresponding captions and their answers first. In the end, for the last cartoon, answer with only one letter A or B, and nothing else."
                                    },        
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image1}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"For this example, the two captions are A: {captionA1}, B: {captionB1}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label1}"},
                                # 2nd example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image2}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA2}, B: {captionB2}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label2}"},
                                # 3rd example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image3}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA3}, B: {captionB3}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label3}"},
                                # 4 example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image4}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA4}, B: {captionB4}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label4}"},
                                # 5 example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image5}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA5}, B: {captionB5}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label5}"},


                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Answer with only one letter A or B, and nothing else. Choose the group of caption that is funnier. Group A: {captionB} or Group B: {captionA}"
                                    }],
                                }
                            ],
                            
                            "logprobs": True,
                            "top_logprobs": 2,
                            "temperature": 0
                            }

                            response = requests.post("https://api.openai.com/v1/chat/completions", headers=self.headers, json=payload)
                            if 'choices' in response.json():
                                self.results.append([flip_label, response.json()['choices'][0]['message']['content'], response.json()['choices'][0]['logprobs']['content'][0]['top_logprobs']])
                                success = True
                            else: 
                                print("No 'choices' in response, retrying...")
                                raise KeyError("The 'choices' key is missing or empty.")

                        except KeyError as key_err:
                            print(f'Key error: {key_err}')
                        except Exception as err:
                            print(f'Other error occurred: {err}')
                            
                        if not success:
                            retry_count += 1
                            print(f"Attempt {retry_count} failed for iteration {i}, retrying in {self.retry_delay} seconds...")
                            time.sleep(self.retry_delay)
                            
                    if not success:
                        print(f"Max retries reached for iteration {i}. Moving to next iteration.")

                    
                        
                elif self.comparison_method == "BestPick":
                    retry_count = 0 
                    success = False
                    while not success and retry_count < self.max_retries:
                        try:
                            payload = {
                            "model": self.evaluator,
                            "messages": [
                                {"role": "system", 
                                "content": "You are a judge for the new yorker cartoon caption contest. Your job is to find the funniest caption."
                                },
                                # 1st example
                                {"role": "user",
                                "content": [
                                    {"type": "text", 
                                    "text": "In this task, you will see a cartoon first and two captions that were written about it then. The task is to choose which caption is funnier. I am going to show you five cartoons, corresponding captions and their answers first. In the end, for the last cartoon, answer with only one letter A or B, and nothing else."
                                    },        
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image1}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"For this example, the two captions are A: {captionA1}, B: {captionB1}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label1}"},
                                # 2nd example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image2}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA2}, B: {captionB2}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label2}"},
                                # 3rd example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image3}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA3}, B: {captionB3}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label3}"},
                                # 4 example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image4}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA4}, B: {captionB4}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label4}"},
                                # 5 example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image5}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA5}, B: {captionB5}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label5}"},


                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Find the funniest caption for each group. Then choose the funnier group based on these funniest captions. Think step by step but finish the last line of your answer with only one letter A or B, and nothing else. A: {captionA} or B: {captionB}"
                                    }],
                                }
                            ],
                            
                            "logprobs": True,
                            "top_logprobs": 2,
                            "temperature": 0
                            }

                            response = requests.post("https://api.openai.com/v1/chat/completions", headers=self.headers, json=payload)
                            if 'choices' in response.json():
                                self.results.append([label, response.json()['choices'][0]['message']['content'], response.json()['choices'][0]['logprobs']['content'][0]['top_logprobs']])
                                success = True
                            else: 
                                print("No 'choices' in response, retrying...")
                                raise KeyError("The 'choices' key is missing or empty.")

                        except KeyError as key_err:
                            print(f'Key error: {key_err}')
                        except Exception as err:
                            print(f'Other error occurred: {err}')
                            
                        if not success:
                            retry_count += 1
                            print(f"Attempt {retry_count} failed for iteration {i}, retrying in {self.retry_delay} seconds...")
                            time.sleep(self.retry_delay)
                            
                    if not success:
                        print(f"Max retries reached for iteration {i}. Moving to next iteration.")
                        
                    flip_label = "B"
                        
                    retry_count = 0 
                    success = False
                    while not success and retry_count < self.max_retries:
                        try:
                            payload = {
                            "model": self.evaluator,
                            "messages": [
                                {"role": "system", 
                                "content": "You are a judge for the new yorker cartoon caption contest. Your job is to find the funniest caption."
                                },
                                # 1st example
                                {"role": "user",
                                "content": [
                                    {"type": "text", 
                                    "text": "In this task, you will see a cartoon first and two captions that were written about it then. The task is to choose which caption is funnier. I am going to show you five cartoons, corresponding captions and their answers first. In the end, for the last cartoon, answer with only one letter A or B, and nothing else."
                                    },        
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image1}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"For this example, the two captions are A: {captionA1}, B: {captionB1}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label1}"},
                                # 2nd example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image2}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA2}, B: {captionB2}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label2}"},
                                # 3rd example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image3}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA3}, B: {captionB3}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label3}"},
                                # 4 example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image4}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA4}, B: {captionB4}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label4}"},
                                # 5 example
                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image5}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Another example, the two captions are A: {captionA5}, B: {captionB5}. The answer is"
                                    }
                                ]},
                                {"role": "assistant", 
                                "content": f"{label5}"},


                                {"role": "user",
                                "content": [
                                    {"type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image}",  "detail": "high"}
                                    },
                                    {"type": "text",
                                    "text": f"Find the funniest caption for each group. Then choose the funnier group based on these funniest captions. Think step by step but finish the last line of your answer with only one letter A or B, and nothing else. A: {captionB} or B: {captionA}"
                                    }],
                                }
                            ],
                            
                            "logprobs": True,
                            "top_logprobs": 2,
                            "temperature": 0
                            }

                            response = requests.post("https://api.openai.com/v1/chat/completions", headers=self.headers, json=payload)
                            if 'choices' in response.json():
                                self.results.append([flip_label, response.json()['choices'][0]['message']['content'], response.json()['choices'][0]['logprobs']['content'][0]['top_logprobs']])
                                success = True
                            else: 
                                print("No 'choices' in response, retrying...")
                                raise KeyError("The 'choices' key is missing or empty.")

                        except KeyError as key_err:
                            print(f'Key error: {key_err}')
                        except Exception as err:
                            print(f'Other error occurred: {err}')
                            
                        if not success:
                            retry_count += 1
                            print(f"Attempt {retry_count} failed for iteration {i}, retrying in {self.retry_delay} seconds...")
                            time.sleep(self.retry_delay)
                            
                    if not success:
                        print(f"Max retries reached for iteration {i}. Moving to next iteration.")
                    
        for result in self.results:
            if result[1] != "A" and result[1] != "B":
                print("Check!\n", result)
                
        print("The length of results is", len(self.results))
        if self.comparison_method == "Overall":
            if self.type == "Image":
                accuracy = recalibrate_v(self.results)
            else:
                accuracy = recalibrate(self.results)
        else:
            accuracy = compute_accuracy(self.results)
        
        return accuracy